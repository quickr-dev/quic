name: Release

on:
  push:
    tags: ["v*"]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate protobuf files
        run: |
          protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/quic.proto

      - name: Build releases
        run: |
          # Build for macOS
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X 'github.com/quickr-dev/quic/internal/version.Version=${{ steps.version.outputs.version }}'" -o quic-darwin-amd64 ./cmd/quic
          GOOS=darwin GOARCH=arm64 go build -ldflags="-X 'github.com/quickr-dev/quic/internal/version.Version=${{ steps.version.outputs.version }}'" -o quic-darwin-arm64 ./cmd/quic

          # Build for Linux
          GOOS=linux GOARCH=amd64 go build -ldflags="-X 'github.com/quickr-dev/quic/internal/version.Version=${{ steps.version.outputs.version }}'" -o quic-linux-amd64 ./cmd/quic

      - name: Generate checksums
        run: |
          shasum -a 256 quic-* > checksums.txt
          cat checksums.txt

      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: |
      #       quic-darwin-amd64
      #       quic-darwin-arm64
      #       quic-linux-amd64
      #       checksums.txt
      #     generate_release_notes: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update quic-cli repo with latest binaries
        run: |
          # Clone the public quic-cli repo
          git clone https://github.com/quickr-dev/quic-cli.git
          cd quic-cli

          # Create bin directory if it doesn't exist
          mkdir -p bin

          # Replace binaries with latest versions (no version folders)
          cp ../quic-darwin-amd64 bin/
          cp ../quic-darwin-arm64 bin/
          cp ../quic-linux-amd64 bin/

          # Update VERSION file
          echo "${{ steps.version.outputs.version }}" > VERSION

          # Commit and push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Update binaries to ${{ steps.version.outputs.version }}"
          git push https://${{ secrets.HOMEBREW_TAP_TOKEN }}@github.com/quickr-dev/quic-cli.git
        env:
          HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
