# VM size: 4 cpus, 40GB disk, 8GB RAM

#cloud-config
package_update: true
package_upgrade: true

packages:
  - zfsutils-linux
  - postgresql-16
  - postgresql-contrib
  - postgresql-16-pgaudit
  - postgresql-16-cron
  - pgbackrest
  - unzip
  - wget
  - openssl

write_files:
  - path: /usr/local/bin/setup-zfs-datasets.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e

      # Wait for ZFS module to be available
      modprobe zfs

      # Create ZFS pool using the file
      truncate -s 40G /zfs-disk
      zpool create tank /zfs-disk

      # Restore-specific optimization
      zfs set recordsize=8K       tank
      zfs set compression=lz4     tank
      zfs set atime=off           tank
      zfs set logbias=throughput  tank

      # Create tank/_restore after zfs settings so it inherits
      zfs create tank/_restore

      # Create folder where the agent will live
      mkdir /tank/bin

      # Set ownership
      chown -R postgres:postgres /tank

      echo "ZFS setup complete"

  - path: /usr/local/bin/setup-pgbackrest-restore.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e

      # Download and install CrunchyBridge CLI
      cd /tmp
      wget -q https://github.com/CrunchyData/bridge-cli/releases/download/v3.6.6/cb-v3.6.6_linux_aarch64.zip
      unzip -q cb-v3.6.6_linux_aarch64.zip
      mv cb /usr/local/bin/
      chmod +x /usr/local/bin/cb

      # Set up environment for CB CLI
      export HOME=/root
      export CB_API_KEY="cbkey_1hJ9NVAlxRWXfb6hFFYQEc7kaRdNPdNqZACsQFNMbuSpsp"

      # Generate pgbackrest config
      cb backup token --format=pgbackrest f2p7pz2txzhlppz4nc6apfyhpi > /etc/pgbackrest.conf

      # Extract stanza name
      export STANZA="$(head -n1 < /etc/pgbackrest.conf | sed -E 's/\[(.*)\]/\1/g')"

      # Perform pgbackrest restore
      pgbackrest restore \
        --stanza=$STANZA \
        --pg1-path=/tank/_restore \
        --archive-mode=off \
        --type=standby \
        --log-level-console=detail


      # Clean up postgresql.conf - remove loaded extensions and include conf.d
      sed -i '/shared_preload_libraries/d' /tank/_restore/postgresql.conf
      sed -i '/include_dir.*conf\.d/d' /tank/_restore/postgresql.conf

      # Fix server.key permissions for PostgreSQL security requirements
      chmod 600 /tank/_restore/server.key

      # Set proper ownership after restore (ensure all files are postgres owned)
      chown -R postgres:postgres /tank/_restore

      echo "pgbackrest restore complete"

  - path: /usr/local/bin/generate-tls-certs.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e

      mkdir -p /etc/quic/certs
      cd /etc/quic/certs

      # Generate private key
      openssl genrsa -out server.key 2048

      # Generate self-signed certificate
      openssl req -new -x509 -key server.key -out server.crt -days 3650 -subj "/CN=quic-server"

      # Set proper permissions
      chmod 600 server.key
      chmod 644 server.crt
      chown -R postgres:postgres /etc/quic/certs

      echo "TLS certificates generated"

  - path: /usr/local/bin/setup-postgres-sudoers.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      # echo 'postgres ALL=(ALL) NOPASSWD: /sbin/zfs, /sbin/zpool, /usr/sbin/ufw, /bin/kill, /usr/bin/pgrep, /bin/rm, /bin/sh' > /etc/sudoers.d/postgres-zfs
      # ALL temporary to validate this is the issue we're seeing with tests asking for password
      echo 'postgres ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/postgres-zfs
      chmod 440 /etc/sudoers.d/postgres-zfs

  - path: /etc/systemd/system/postgresql-restored.service
    permissions: "0644"
    content: |
      [Unit]
      Description=PostgreSQL database server (restored instance)
      Documentation=man:postgres(1)
      After=network.target

      [Service]
      Type=notify
      User=postgres
      ExecStart=/usr/lib/postgresql/16/bin/postgres -D /tank/_restore --port=5433
      ExecReload=/bin/kill -HUP $MAINPID
      KillMode=mixed
      KillSignal=SIGINT
      TimeoutSec=0

      [Install]
      WantedBy=multi-user.target

  - path: /etc/systemd/system/quicd.service
    permissions: "0644"
    content: |
      [Unit]
      Description=Quic gRPC Server
      Documentation=Quic gRPC API server
      After=network.target postgresql-restored.service
      Requires=postgresql-restored.service

      [Service]
      Type=simple
      User=postgres
      WorkingDirectory=/tank
      ExecStart=/tank/bin/quicd
      Restart=always
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

runcmd:
  # Load ZFS module
  - modprobe zfs

  # Install multipass-sshfs for mounting support
  - snap install multipass-sshfs

  # Setup ZFS datasets
  - /usr/local/bin/setup-zfs-datasets.sh

  # Setup pgbackrest restore
  - /usr/local/bin/setup-pgbackrest-restore.sh

  # Generate TLS certificates for gRPC server
  - /usr/local/bin/generate-tls-certs.sh

  # Enable and start PostgreSQL restored service
  - systemctl daemon-reload
  - systemctl enable postgresql-restored.service
  - systemctl start postgresql-restored.service

  # Grant postgres user ZFS permissions
  - /usr/local/bin/setup-postgres-sudoers.sh

  # Configure UFW firewall
  - ufw allow ssh
  - ufw allow 8443/tcp
  - ufw --force enable

  # Ensure ZFS pool is imported on boot
  - echo "zpool import -a" >> /etc/rc.local
  - chmod +x /etc/rc.local

final_message: "E2E test environment ready with ZFS, PostgreSQL 16, and pgbackrest"
